using System;
using System.Collections;
using System.Collections.Generic;
using MicroSimSettings;
using System.Linq;
using Microsoft.Win32.SafeHandles;
using System.Collections.Concurrent;
using System.Threading.Tasks;

namespace CompiledNamspaceFoo_42142292f912494bbc08c5abe587697f
{
	public enum NEME {
		Nõ=2,
		Férfi=1 }

	public enum ÉlõVagyHolt {
		Élõ=1,
		Holt=2 }

	public enum SCSAL {
		EgySzülõGyermekkel=4,
		Gyermek=5,
		FelmenõRokon=6,
		EgyébRokon=7,
		NemRokon=8,
		Egyedülálló=9,
		Férj=1,
		Feleség=2,
		Élettárs=3 }

	public enum CSLAS {
		Elvált=4,
		Özvegy=3,
		Házas=2,
		HajadonNõtlen=1 }

	public enum STANUL2 {
		Nappali=1,
		Esti=2,
		Levelezõ=3,
		Távoktatás=4,
		Egyéb=5 }

	public enum Eldöntedõ {
		Igen=1 }

	public enum KépzésiForma {
		Szakiskola910Évfolyama=3,
		ÁltIskola14Évfolyama=1,
		ÁltIskolaVagyGimnázium58Évfolyama=2,
		Fõiskola=8,
		Középiskola912Évfolyama=4,
		Szakiskola111213Évfolyama=5,
		Középiskola1314Évfolyama=6,
		AkkreditáltFelsõfokúSzakképzés=7,
		Egyetem=9,
		DoktoriIlletveMesterképzés=10,
		IskolarendszerenKívüliKépzés=11 }

	public enum REGIO {
		KözépDunántúl=2,
		NyugatDunántúl=3,
		DélDunántúl=4,
		ÉszakMagyarország=5,
		ÉszakAlföld=6,
		Budapest=8,
		PestMegye=9,
		DélAlföld=7 }

	public enum SGAKT2 {
		AlkalmazásbanÁllóSzövetkezetnél=13,
		AlkalmazásbanÁllóKöltségvetésiIntézménynél=11,
		AlkalmazásbanÁllóVállalkozásnál=12,
		AlkalmazásbanÁllóAlkalmiMunkásNapszámos=14,
		AlkalmazásbanÁllóSzövetkezetiTag=15,
		TársasVállalkozásTagja=21,
		EgyéniVállalkozóAlkalmazottNélkül=22,
		EgyéniVállalkozóAlkalmazottal=23,
		SegítõCsaládtag=29,
		Nincs=99 }

	public enum SCSAP {
		NõtlenHajadon=1,
		HázasHázastársávalEgyüttÉl=2,
		HázasHázstársávalNemÉlEgyütt=3,
		Özvegy=4,
		Elvált=5 }

	public enum HFAKT {
		EgyébInaktív=4,
		Munkanélküli=2,
		Foglalkoztatott=1,
		Nyugdíjas=3 }

	public enum ESTATUS {
		Egyéb=4,
		Vállalkozó=2,
		Nyugdíjas=3,
		Munkavállaló=1 }

	public enum SGAKT1 {
		EgyébEltartottNemKívánDolgozniStb=93,
		AlkalmazásbanÁllóKöltségvetésiIntézménynél=11,
		AlkalmazásbanÁllóVállalkozásnál=12,
		AlkalmazásbanÁllóSzövetkezetnél=13,
		AlkalmazásbanÁllóAlkalmiMunkásNapszámos=14,
		AlkalmazásbanÁllóSzövetkezetiTag=15,
		TársasVállalkozásTagja=21,
		EgyéniVállalkozóAlkalmazottNélkül=22,
		EgyéniVállalkozóAlkalmazottal=23,
		SegítõCsaládtag=29,
		SzülésiSzabadságonVan=31,
		GyedenVan=41,
		GyesenVanÉsNemDolgozikMellette=42,
		GyetenVanÉsNemDolgozikMellette=43,
		GyesMellettDolgozik=44,
		GyetMellettDolgozik=45,
		MunkanélküliEllátásNélkül=51,
		MunkanélküliJáradékotKap=52,
		MunkanélküliSzociálisSegélyezett=53,
		MunkanélküliÁlláskeresésiTámogatásbanRészesülõ=54,
		NyugdíjasSajátJogúÖregségi=61,
		NyugdíjasSajátJogúRokkantsági=62,
		NyugdíjasÖzvegyiHozzátartozói=63,
		NyugdíjasAmellettFoglalkoztatott=64,
		NyugdíjasÖzvegyiAmellettFoglalkoztatott=65,
		EgyébRendszeresSzociálisSegélyezett=71,
		ÁPolásiDíjbanRészesülõ=72,
		RokkantságiJáradékos=73,
		VagyonábólÉlõ=81,
		IskolábaMégNemJáróGyermek=90,
		Tanuló=91,
		HáztartástVezet=92 }

	public enum HFSGAKT1 {
		MunkanélküliSzociálisSegélyezett=53,
		MunkanélküliJáradékotKap=52,
		MunkanélküliEllátásNélkül=51,
		GyetMellettDolgozik=45,
		GyesMellettDolgozik=44,
		GyetenVanÉsNemDolgozikMellette=43,
		GyesenVanÉsNemDolgozikMellette=42,
		GyedenVan=41,
		SzülésiSzabadságonVan=31,
		AlkalmazásbanÁllóKöltségvetésiIntézménynél=11,
		AlkalmazásbanÁllóSzövetkezetiTag=15,
		AlkalmazásbanÁllóAlkalmiMunkásNapszámos=14,
		AlkalmazásbanÁllóSzövetkezetnél=13,
		AlkalmazásbanÁllóVállalkozásnál=12,
		EgyébEltartottNemKívánDolgozniStb=93,
		HáztartástVezet=92,
		RokkantságiJáradékos=73,
		Tanuló=91,
		IskolábaMégNemJáróGyermek=90,
		VagyonábólÉlõ=81,
		SegítõCsaládtag=29,
		EgyéniVállalkozóAlkalmazottal=23,
		EgyéniVállalkozóAlkalmazottNélkül=22,
		TársasVállalkozásTagja=21,
		ÁPolásiDíjbanRészesülõ=72,
		EgyébRendszeresSzociálisSegélyezett=71,
		NyugdíjasÖzvegyiAmellettFoglalkoztatott=65,
		NyugdíjasAmellettFoglalkoztatott=64,
		NyugdíjasÖzvegyiHozzátartozói=63,
		NyugdíjasSajátJogúRokkantsági=62,
		NyugdíjasSajátJogúÖregségi=61,
		MunkanélküliÁlláskeresésiTámogatásbanRészesülõ=54 }

	public enum MEGYEKOD {
		Veszprém=19,
		Zala=20,
		HajdúBihar=9,
		GyõrMoson=8,
		Fejér=7,
		Csongrád=6,
		BorsodAbauj=5,
		Békés=4,
		BácsKiskun=3,
		Baranya=2,
		Budapest=1,
		Vas=18,
		Tolna=17,
		JászNagykun=16,
		Szabolcs=15,
		Somogy=14,
		Pest=13,
		Nógrád=12,
		Komárom=11,
		Heves=10 }

	public class Person
	{
		public Household Household { get; set; }
		public System.Boolean IsAlive { get; set; }
		public System.String ParentID { get; set; }
		public System.Int32 BirthYear { get; set; }
		public System.Int32 Gender { get; set; }
		public System.Int32 CSLAS { get; set; }
		public System.Int32 Regio { get; set; }

		public Person()
		{
			this.IsAlive=true;
			this.BirthYear=1900;
			this.Gender=1;
			this.CSLAS=1;
			this.Regio=2;
		}

		public void Die()
		{
			IsAlive = false;
			ExtensionMethods.LeaveHousehold(this);
		}

		public Person Clone()
		{
			Person p = new Person();
			p.IsAlive = this.IsAlive;
			p.ParentID = this.ParentID;
			p.BirthYear = this.BirthYear;
			p.Gender = this.Gender;
			p.CSLAS = this.CSLAS;
			p.Regio = this.Regio;
			return p;
		}
	}

	public class Household
	{
		public List<Person> Members { get; set; }
		public System.Boolean IsEmpty { get; set; }
		public System.String ParentID { get; set; }

		public Household()
		{
			this.Members = new List<Person>();
			this.IsEmpty=false;
		}

		public Household Clone()
		{
			Household h = new Household();
			h.IsEmpty = this.IsEmpty;
			h.ParentID = this.ParentID;
			return h;
		}
	}

	public static class ExtensionMethods
	{

		public static double[,,] SzületésiValószínûség_array = {
			{{0.021, 0.016, 0.026, 0.028, 0.024, 0.027, 0.03, 0.03},
			{0.035, 0.03, 0.04, 0.042, 0.038, 0.041, 0.044, 0.044},
			{0.035, 0.03, 0.04, 0.042, 0.038, 0.041, 0.044, 0.044},
			{0.03, 0.025, 0.035, 0.037, 0.033, 0.036, 0.039, 0.039},
			{0.025, 0.02, 0.03, 0.032, 0.028, 0.031, 0.034, 0.034},
			{0.021, 0.016, 0.026, 0.028, 0.024, 0.027, 0.03, 0.03}},
			{{0.031, 0.026, 0.036, 0.038, 0.034, 0.037, 0.04, 0.032},
			{0.045, 0.04, 0.05, 0.052, 0.048, 0.051, 0.044, 0.041},
			{0.045, 0.04, 0.05, 0.052, 0.048, 0.051, 0.044, 0.041},
			{0.04, 0.035, 0.045, 0.047, 0.043, 0.046, 0.039, 0.049},
			{0.035, 0.03, 0.04, 0.042, 0.038, 0.041, 0.034, 0.044},
			{0.031, 0.026, 0.036, 0.038, 0.034, 0.037, 0.032, 0.04}},
			{{0.012, 0.007, 0.017, 0.019, 0.015, 0.018, 0.021, 0.021},
			{0.026, 0.021, 0.031, 0.033, 0.029, 0.032, 0.035, 0.035},
			{0.026, 0.021, 0.031, 0.033, 0.029, 0.032, 0.035, 0.035},
			{0.021, 0.016, 0.026, 0.028, 0.024, 0.027, 0.03, 0.03},
			{0.016, 0.011, 0.021, 0.023, 0.019, 0.022, 0.025, 0.025},
			{0.012, 0.007, 0.017, 0.019, 0.015, 0.018, 0.021, 0.021}},
			{{0.012, 0.007, 0.017, 0.019, 0.015, 0.018, 0.021, 0.021},
			{0.026, 0.021, 0.031, 0.033, 0.029, 0.032, 0.035, 0.035},
			{0.026, 0.021, 0.031, 0.033, 0.029, 0.032, 0.035, 0.035},
			{0.021, 0.016, 0.026, 0.028, 0.024, 0.027, 0.03, 0.03},
			{0.016, 0.011, 0.021, 0.023, 0.019, 0.022, 0.025, 0.025},
			{0.012, 0.007, 0.017, 0.019, 0.015, 0.018, 0.021, 0.021}
			}};


		public static double SzületésiValószínûség(CSLAS cSLAS,int korcsoport,REGIO rEGIO)
		{
			int v0=(int)cSLAS-1;
			int v1=korcsoport-4;
			int v2=(int)rEGIO-2;

			return SzületésiValószínûség_array[v0,v1,v2];
		}


		public static double[] Korcsoport_array = {
			1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19}
			;


		public static double Korcsoport(int év)
		{
			int v0=év-0;

			return Korcsoport_array[v0];
		}


		public static double[,] HalálozásiValószínûség_array = {
			{0.00532, 0.00036, 0.00016, 0.00024, 0.00012, 0.00012, 0.00014, 0.00014, 0.00014, 0.00016, 4E-05, 0.00016, 0.00015, 0.00029, 0.00024, 0.00039, 0.00033, 0.00041, 0.00057, 0.00051, 0.00084, 0.00082, 0.00083, 0.0007, 0.00075, 0.00074, 0.00071, 0.00065, 0.00098, 0.00106, 0.00111, 0.00104, 0.0011, 0.00114, 0.00142, 0.00131, 0.00179, 0.00209, 0.0022, 0.00269, 0.00284, 0.00327, 0.00459, 0.00451, 0.00501, 0.00618, 0.00681, 0.00853, 0.00941, 0.00978, 0.01079, 0.01354, 0.01397, 0.01525, 0.01706, 0.01763, 0.0195, 0.01923, 0.02135, 0.02237, 0.02451, 0.02552, 0.02774, 0.02728, 0.03068, 0.03261, 0.03414, 0.03671, 0.03817, 0.04078, 0.04299, 0.04751, 0.04936, 0.0523, 0.06065, 0.06437, 0.06654, 0.07356, 0.07742, 0.08778, 0.09276, 0.10211, 0.11579, 0.11738, 0.1285, 0.14253, 0.1538, 0.16387, 0.16116, 0.18377, 0.15195, 0.16861, 0.19438, 0.20083, 0.24455, 0.24426, 0.25698, 0.26994, 0.2831, 0.29642, 0.30986, 0.32338, 0.33693, 0.35047, 0.36395, 0.37733, 0.39057, 0.40363, 0.41646, 0.42904, 1},
			{0.00494, 0.00038, 0.00017, 0.00021, 9E-05, 0.00011, 0.00011, 0.00013, 8E-05, 0.00013, 9E-05, 0.00013, 0.00016, 0.00017, 0.00016, 0.00013, 0.00038, 0.00018, 0.00021, 0.00028, 0.00026, 0.00028, 0.0003, 0.00021, 0.00018, 0.00018, 0.00017, 0.00036, 0.00029, 0.00032, 0.00033, 0.00048, 0.00044, 0.00047, 0.00064, 0.00079, 0.00079, 0.00096, 0.00099, 0.00127, 0.0013, 0.00155, 0.00158, 0.00208, 0.00228, 0.0031, 0.00292, 0.00357, 0.00331, 0.00411, 0.00482, 0.00552, 0.00549, 0.00632, 0.00637, 0.00695, 0.00698, 0.00782, 0.00828, 0.00872, 0.00967, 0.01059, 0.01171, 0.01131, 0.01291, 0.01294, 0.01405, 0.01632, 0.01671, 0.01961, 0.02154, 0.02236, 0.02447, 0.0272, 0.03252, 0.0351, 0.03655, 0.04483, 0.05012, 0.05435, 0.06332, 0.06959, 0.0813, 0.08729, 0.09655, 0.10878, 0.1192, 0.13526, 0.13966, 0.16399, 0.1409, 0.16955, 0.19846, 0.20919, 0.24252, 0.24967, 0.2678, 0.28635, 0.3052, 0.32424, 0.34333, 0.36236, 0.3812, 0.39973, 0.41784, 0.43544, 0.45243, 0.46874, 0.48431, 0.49909, 1}
			};


		public static double HalálozásiValószínûség(NEME nEME,int kor)
		{
			int v0=(int)nEME-1;
			int v1=kor-0;

			return HalálozásiValószínûség_array[v0,v1];
		}



		private static double MaleBirthProbability = 0.514;

		public static SimStepOutput SimStep(int currentID, object currentPerson, int Year, int randomSeed)
		{
			Random rng = new Random(randomSeed);
			ModelSettings settings = ModelSettings.Instance;
			Person p = (Person)currentPerson;
			SimStepOutput output = new SimStepOutput();
			List<object> NewBorns = new List<object>();
			output.NewBorns = NewBorns;

			if(!p.IsAlive) return output;

			dynamic Age;
			dynamic KorCsop;
			
			
			Age = Year - p.BirthYear;
			KorCsop = ExtensionMethods.Korcsoport((int)Age);
			if (Age >= 110) {
			  p.Die();

			  return output;

			}
			if (rng.NextDouble() <= ExtensionMethods.HalálozásiValószínûség((NEME)p.Gender, (int)Age)) {
			  p.Die();

			  return output;

			}
			if ((((p.Gender == (int)NEME.Nõ && p.Regio > 1) && (KorCsop > 4 && KorCsop <= 9)) && p.CSLAS <= 4) && rng.NextDouble() <= ExtensionMethods.SzületésiValószínûség((CSLAS)p.CSLAS, (int)KorCsop, (REGIO)p.Regio)) {
			  Person n = new Person();

			  Person m = p;

			  n.Household = p.Household;

			  n.Household.Members.Add(n);

			  n.ParentID = currentID.ToString() + NewBorns.Count.ToString();

			  n.BirthYear = Year;
			  if (rng.NextDouble() <= MaleBirthProbability) {
			    n.Gender = (int)NEME.Férfi;
			  } else {
			    n.Gender = (int)NEME.Nõ;
			  }
			  
			  n.Regio = m.Regio;
			  n.CSLAS = 4;
			  
			  NewBorns.Add(n);

			}
			
			return output;
		}

		public static void LeaveHousehold(object person)
		{
			Person p = (Person)person;
			Household oldHousehold = p.Household;
			lock(oldHousehold.Members) {
				oldHousehold.Members.Remove(p);
				p.Household = null;
				if(oldHousehold.Members.Count == 0) oldHousehold.IsEmpty = true;
			}
		}

		public static void JoinHousehold(object person, object newHousehold)
		{
			Person p = (Person)person;
			ExtensionMethods.LeaveHousehold(p);
			p.Household = (Household)newHousehold;
			((Household)newHousehold).Members.Add(p);
		}

		public static void JoinNewHousehold(object person, object newHousehold, string joinType)
		{
			Person p = (Person)person;
			Household oldHousehold = p.Household;
			Household n = (Household)newHousehold;

			
			ExtensionMethods.LeaveHousehold(p);
			p.Household = n;
			n.Members.Add(p);
		}

		public static void GetResults(object inputPopulation, List<Result> ResultList, int Year)
		{
			List<Person> Population = (List<Person>)inputPopulation;

			List<ResultItem> selectKorfa = Population.Where(p => p.IsAlive).GroupBy(p => new { Nem = (p.Gender), Kor = (Year - p.BirthYear) }).Select(g => new ResultItem() { Year = Year, Key = g.Key, Value = g.Count(p => p.IsAlive) }).ToList();
			Result Korfa = ResultList.Find((x) => x.Name.Equals("Korfa"));
			if(Korfa == null) { Korfa = new Result("Korfa"); ResultList.Add(Korfa); }
			Korfa.AddSelectResult(selectKorfa);
			
		}
	}
	public static class RelationshipExtensions
	{
		public static void CreateNewRelationships(object inputPopulation, ConcurrentBag<Relationship> newRelationships, ConcurrentBag<object> newHouseholds, ParallelOptions pOptions, Random GlobalRng)
		{
			List<Person> Population = (List<Person>)inputPopulation;
			var relationshipTypeGroups = ModelSettings.Instance.RelationShipGroupingVariables.GroupBy(x => x.Type, (key, g) => g.ToList());
			foreach (var rtGroup in relationshipTypeGroups)
			{
				string relationshipType = rtGroup.First().Type;
				var currentPeople = newRelationships.Where(x => x.Type == relationshipType).Select(x => (Person)x.Person).ToList<Person>();

				if(relationshipType == "Marriage")
				{
					var sourceGroups = currentPeople.GroupBy(p => new { CSLAS = p.CSLAS, Regio = p.Regio }, (key, g) => new { Key = key, Members = g.ToList<Person>() }).ToList();
					var targetGroups = Population.Where(p => p.IsAlive && p.Gender.ToString() != "2" && (double)p.BirthYear < 1990).GroupBy(p => new { CSLAS = p.CSLAS, Regio = p.Regio }, (key, g) => new { Key = key, Members = g.ToList<Person>() }).ToList();
					int[] randomSeeds = new int[sourceGroups.Count];
					for (int rngId = 0; rngId < randomSeeds.Length; rngId++)
					{
						randomSeeds[rngId] = GlobalRng.Next();
					}
					Parallel.For(0, sourceGroups.Count, pOptions, (i) => 
					{
						int j = i;
						var sourceGroup = sourceGroups[j];
						Random rng = new Random(randomSeeds[j]);
						List<int> targetIds = new List<int>();
						List<int> targetCounts = new List<int>();
						foreach (var sourcePerson in sourceGroup.Members)
						{
							int keyDistance = -1;
							double keyDistanceProbability = rng.NextDouble();
							if(keyDistanceProbability <= 0.65) keyDistance = 0;
							else if(keyDistanceProbability <= 0.9) keyDistance = 1;
							else if(keyDistanceProbability <= 1) keyDistance = 2;

							targetIds.Clear();
							targetCounts.Clear();
							for (int tgId = 0; tgId < targetGroups.Count; tgId++)
							{
								var targetGroup = targetGroups[tgId];
								int currentKeyDistance = 0;
								currentKeyDistance += (int)Math.Abs(targetGroup.Key.CSLAS - sourceGroup.Key.CSLAS);
								currentKeyDistance += (int)Math.Abs(targetGroup.Key.Regio - sourceGroup.Key.Regio);

								if(currentKeyDistance != keyDistance) continue;

								targetIds.Add(tgId);
								targetCounts.Add(targetGroup.Members.Count());
							}

							int selectedTargetId = rng.Next(targetCounts.Sum());
							Person targetPerson = null;
							for (int tgId = 0; tgId < targetIds.Count(); tgId++)
							{
								if(targetCounts[tgId] <= selectedTargetId)
								{
									selectedTargetId -= targetCounts[tgId];
								}
								else
								{
									var targetGroup = targetGroups[targetIds[tgId]];
									targetPerson = targetGroup.Members[selectedTargetId];
									break;
								}
							}
							if(targetPerson == null || targetPerson == sourcePerson) continue;
							Household h = new Household();
							newHouseholds.Add(h);
							ExtensionMethods.JoinNewHousehold(sourcePerson, h, "Marriage");
							ExtensionMethods.JoinNewHousehold(targetPerson, h, "Marriage");
						}
					});
				}
			}
		}

	}
}
